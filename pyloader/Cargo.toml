[package]
name = "pyloader"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
name = "pyloader"
crate-type = ["cdylib"]

[dependencies]
# libz-ng-sys = "=1.1.16"  # failed on 1.1.20
# serde_json = { version = "1", default-features = false, optional = true }
pyo3 = { version = "0.21.0", features = [
    "anyhow",
    "chrono",
    "abi3-py38",
    "multiple-pymethods",
] }
tea-data-loader = { path = "../", features = [
    "io",
    "fac-analyse",
    "tick-fac",
    "tick-future-fac",
    "map-fac",
    "dtype-full"
] }
pyo3-polars = { version = "0.18.0", features = [
    "derive",
    "dtype-full",
    "lazy",
    "object",
] }
# polars-plan = { version = "0.44", default-features = false }
# polars-utils = { version = "0.44", default-features = false }
# polars-lazy = { version = "0.44", default-features = false }

# [dependencies.polars]
# version = "0.44"
# features = [
#     "abs",
#     "approx_unique",
#     "array_any_all",
#     "arg_where",
#     "bitwise",
#     "business",
#     "concat_str",
#     "cum_agg",
#     "cumulative_eval",
#     "dataframe_arithmetic",
#     "month_start",
#     "month_end",
#     "offset_by",
#     "diagonal_concat",
#     "diff",
#     "dot_diagram",
#     "dot_product",
#     "dtype-categorical",
#     "dtype-full",
#     "dynamic_group_by",
#     "ewma",
#     "ewma_by",
#     "fmt",
#     "fused",
#     "interpolate",
#     "interpolate_by",
#     "is_first_distinct",
#     "is_last_distinct",
#     "is_unique",
#     "is_between",
#     "lazy",
#     "list_eval",
#     "list_to_struct",
#     "list_arithmetic",
#     # "array_arithmetic",
#     "array_to_struct",
#     "log",
#     "mode",
#     "moment",
#     "ndarray",
#     "partition_by",
#     "product",
#     "random",
#     "range",
#     "rank",
#     "reinterpret",
#     "replace",
#     "rolling_window",
#     "rolling_window_by",
#     "round_series",
#     "row_hash",
#     "rows",
#     "semi_anti_join",
#     "serde-lazy",
#     "string_encoding",
#     "string_reverse",
#     "string_to_integer",
#     "string_pad",
#     "strings",
#     "temporal",
#     "to_dummies",
#     "true_div",
#     "unique_counts",
#     "zip_with",
#     "cov",
# ]

[features]
default = ["map-fac", "tick-fac", "tick-future-fac"]

map-fac = ["tea-data-loader/map-fac"]
tick-fac = ["tea-data-loader/tick-fac"]
tick-future-fac = ["tea-data-loader/tick-future-fac"]
order-book-fac = ["tea-data-loader/order-book-fac"]
order-flow-fac = ["tea-data-loader/order-flow-fac"]

# # Features below are only there to enable building a slim binary during development.
# avro = ["polars/avro"]
# # parquet = ["polars/parquet", "polars-parquet"]
# ipc = ["polars/ipc"]
# ipc_streaming = ["polars/ipc_streaming"]
# is_in = ["polars/is_in"]
# json = ["polars/serde", "serde_json", "polars/json", "polars-utils/serde"]
# trigonometry = ["polars/trigonometry"]
# sign = ["polars/sign"]
# asof_join = ["polars/asof_join"]
# iejoin = ["polars/iejoin"]
# cross_join = ["polars/cross_join"]
# pct_change = ["polars/pct_change"]
# repeat_by = ["polars/repeat_by"]

# streaming = ["polars/streaming"]
# meta = ["polars/meta"]
# search_sorted = ["polars/search_sorted"]
# decompress = ["polars/decompress-fast"]
# regex = ["polars/regex"]
# csv = ["polars/csv"]
# # clipboard = ["arboard"]
# extract_jsonpath = ["polars/extract_jsonpath"]
# pivot = ["polars/pivot"]
# top_k = ["polars/top_k"]
# propagate_nans = ["polars/propagate_nans"]
# sql = ["polars/sql"]
# performant = ["polars/performant"]
# timezones = ["polars/timezones"]
# cse = ["polars/cse"]
# merge_sorted = ["polars/merge_sorted"]
# list_gather = ["polars/list_gather"]
# list_count = ["polars/list_count"]
# array_count = ["polars/array_count", "polars/dtype-array"]
# binary_encoding = ["polars/binary_encoding"]
# list_sets = ["polars-lazy/list_sets"]
# list_any_all = ["polars/list_any_all"]
# array_any_all = ["polars/array_any_all", "polars/dtype-array"]
# list_drop_nulls = ["polars/list_drop_nulls"]
# list_sample = ["polars/list_sample"]
# cutqcut = ["polars/cutqcut"]
# rle = ["polars/rle"]
# extract_groups = ["polars/extract_groups"]
# ffi_plugin = ["polars-plan/ffi_plugin"]
# cloud = [
#     "polars/cloud",
#     "polars/aws",
#     "polars/gcp",
#     "polars/azure",
#     "polars/http",
# ]
# peaks = ["polars/peaks"]
# hist = ["polars/hist"]
# find_many = ["polars/find_many"]
# new_streaming = ["polars-lazy/new_streaming"]
# bitwise = ["polars/bitwise"]
# approx_unique = ["polars/approx_unique"]

# dtype-i8 = []
# dtype-i16 = []
# dtype-u8 = []
# dtype-u16 = []
# dtype-array = []
# object = ["polars/object"]

# dtypes = [
#     "dtype-array",
#     "dtype-i16",
#     "dtype-i8",
#     "dtype-u16",
#     "dtype-u8",
#     "object",
# ]

# operations = [
#     "approx_unique",
#     "array_any_all",
#     "array_count",
#     "bitwise",
#     "is_in",
#     "repeat_by",
#     "trigonometry",
#     "sign",
#     "performant",
#     "list_gather",
#     "list_count",
#     "list_sets",
#     "list_any_all",
#     "list_drop_nulls",
#     "list_sample",
#     "cutqcut",
#     "rle",
#     "extract_groups",
#     "pivot",
#     "extract_jsonpath",
#     "asof_join",
#     "cross_join",
#     "pct_change",
#     "search_sorted",
#     "merge_sorted",
#     "top_k",
#     "propagate_nans",
#     "timezones",
#     "peaks",
#     "hist",
#     "find_many",
# ]

# io = [
#     "json",
#     # "parquet",
#     "ipc",
#     "ipc_streaming",
#     "avro",
#     "csv",
#     "cloud",
#     # "clipboard",
# ]

# optimizations = ["cse", "polars/fused", "streaming"]

# polars_cloud = ["polars/polars_cloud", "polars/ir_serde"]

# # also includes simd
# nightly = ["polars/nightly"]

# # pymethods = []

# all = [
#     # "pymethods",
#     "optimizations",
#     # "io",
#     "operations",
#     "dtypes",
#     "meta",
#     "decompress",
#     "regex",
#     # "sql",
#     "binary_encoding",
#     "ffi_plugin",
#     # "polars_cloud",
#     # "new_streaming",
#     "nightly",
# ]

# # we cannot conditionally activate simd
# # https://github.com/rust-lang/cargo/issues/1197
# # so we have an indirection and compile
# # with --no-default-features --features=all for targets without simd
# default = ["all"]
