from __future__ import annotations

from polars import DataFrame, Expr, LazyFrame

class DataLoader:
    def __init__(self, typ: str, symbols: list[str] | None = None) -> None: ...
    @staticmethod
    def from_dfs(dfs: list[DataFrame | LazyFrame]) -> DataLoader: ...
    def len(self) -> int: ...
    def is_empty(self) -> bool: ...
    def is_lazy(self) -> bool: ...
    def is_eager(self) -> bool: ...
    def with_start(self, start: str) -> DataLoader: ...
    def with_end(self, end: str) -> DataLoader: ...
    def with_symbols(self, symbols: list[str]) -> DataLoader: ...
    def with_freq(self, freq: str) -> DataLoader: ...
    def with_dfs(self, dfs: list[DataFrame | LazyFrame]) -> DataLoader: ...
    @property
    def symbols(self) -> list[str] | None: ...
    @property
    def dfs(self) -> list[DataFrame | LazyFrame]: ...
    @property
    def type(self) -> str: ...
    @property
    def freq(self) -> str | None: ...
    def __getitem__(self, idx: int) -> DataFrame | LazyFrame: ...
    def __repr__(self) -> str: ...
    def collect(self, par: bool = True) -> DataLoader: ...  # noqa: FBT001
    def lazy(self) -> DataLoader: ...
    def kline(
        self,
        freq: str,
        tier: str | None = None,
        adjust: str | None = None,
        concat_tick_df: bool = False,  # noqa: FBT001
    ) -> DataLoader: ...
    def calc_tick_future_ret(
        self,
        facs: list[str],
        c_rate: float = 0.0,
        c_rate_type: str = "absolute",
        is_signal: bool = True,  # noqa: FBT001
        init_cash: int = 10000000,
        bid: str = "bid1",
        ask: str = "ask1",
        contract_chg_signal: str | None = None,
        multiplier: float | None = None,
        signal_type: str = "absolute",
        blowup: bool = False,  # noqa: FBT001
        suffix: str = "",
    ) -> DataLoader: ...
    def with_column(self, expr: Expr) -> DataLoader: ...
    def with_columns(self, exprs: list[Expr]) -> DataLoader: ...
    def select(self, exprs: list[Expr]) -> DataLoader: ...
    def filter(self, expr: Expr) -> DataLoader: ...
    def drop(self, columns: list[str]) -> DataLoader: ...
